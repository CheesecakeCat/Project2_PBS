public class SearchPageController {
    public List<Provider__c> provider_list;
    List<String> address_list;
    
    public Boolean specialtyChecked{get;set;}
    public Boolean locationChecked{get;set;}
    public Boolean languageChecked{get;set;}
    public Boolean genderChecked{get;set;}
    public Boolean nameChecked{get;set;}
    
    /*These values need to be populated when the search button is pressed*/
    public String specialtyValue{get;set;}
    public String locationValue{get;set;}
    public String languageValue{get;set;}
    public String genderValue{get;set;}
    public String nameValue{get;set;}
    
    public Id provider_ID{get;set;}
    
    public SearchPageController(ApexPages.StandardController stdController)
    {
        System.debug('Controller Entered');
        provider_list = new List<Provider__c>();
        specialtyChecked = false;
        locationChecked = false;
        languageChecked = false;
        genderChecked = false;
        nameChecked = false;
    }
    
    public List<Provider__c> getProviders()
    {
        System.debug('getProviders entered');
        System.debug(provider_Id);
        return provider_list;
    }
    
    public ApexPages.StandardSetController setProvider {
        get {
            if(setProvider == null) {
                setProvider = new ApexPages.StandardSetController(Database.getQueryLocator(
                      [select id, name from Provider__c]));
            }
            return setProvider;
        }
        set;
    }
    
    public PageReference Go() {
      provider_Id = System.currentPageReference().getParameters().get('id');
      System.debug(provider_Id);
      PageReference nextpage = new PageReference('/apex/ProviderInfo?id='+provider_id);
                return nextpage;
    }
    
    public List<String> getAddresses()
    {
        List<String> return_list = new List<String>();
        
        for(Provider__c s: [SELECT Address__c FROM Provider__c])
        {
            return_list.add(s.Address__c);
        }
        
        return return_list;
    }
    
	public Boolean getSpecialtyChecked()
    {
        return specialtyChecked;
    }
    
    public Boolean getLocationChecked()
    {
        return locationChecked;
    }
    
    public Boolean getLanguageChecked()
    {
        return languageChecked;
    }
    
    public Boolean getGenderChecked()
    {
        return genderChecked;
    }
    
    public Boolean getNameChecked()
    {
        return nameChecked;
    }
    
    public void swapSpecialtyChecked()
    {
        if(specialtyChecked == true)
        {
        	specialtyChecked = false;
        }
        else
        {
            specialtyChecked = true;
        }
    }
    
    public void swapLocationChecked()
    {
        if(locationChecked == true)
        {
        	locationChecked = false;
        }
        else
        {
            locationChecked = true;
        }
    }
    
    public void swapLanguageChecked()
    {
        if(languageChecked == true)
        {
        	languageChecked = false;
        }
        else
        {
            languageChecked = true;
        }
    }
    
    public void swapGenderChecked()
    {
        if(genderChecked == true)
        {
        	genderChecked = false;
        }
        else
        {
            genderChecked = true;
        }
    }
    
    public void swapNameChecked()
    {
        if(nameChecked == true)
        {
        	nameChecked = false;
        }
        else
        {
            nameChecked = true;
        }
    }
    
    public List<SelectOption> getSpecialtyOptions()
    {
        List<SelectOption> specialties = new List<SelectOption>();
        //Paris are value and label
        specialties.add(new SelectOption('', 'None Specified'));
        specialties.add(new SelectOption('Allergist/Immunologist', 'Allergist/Immunologist'));
        specialties.add(new SelectOption('Anesthesiologist', 'Anesthesiologist'));
        specialties.add(new SelectOption('Cardiologist', 'Cardiologist'));
        specialties.add(new SelectOption('Dentist', 'Dentist'));
        specialties.add(new SelectOption('Dermatologist', 'Dermatologist'));
        specialties.add(new SelectOption('Endocrinologist', 'Endocrinologist'));
        specialties.add(new SelectOption('Family Physicians', 'Family Physicians'));
        specialties.add(new SelectOption('Gastroenterologist', 'Gastroenterologist'));
        specialties.add(new SelectOption('Hermatologist', 'Hermatologist'));
        specialties.add(new SelectOption('Infectious Disease Specialist', 'Infectious Disease Specialist'));
        specialties.add(new SelectOption('Neurologist', 'Neurologist'));
        specialties.add(new SelectOption('Obstetrician/Gynecologist', 'Obstetrician/Gynecologist'));
        specialties.add(new SelectOption('Onocologist', 'Onocologist'));
        specialties.add(new SelectOption('Ophthalmologist', 'Ophthalmologist'));
        specialties.add(new SelectOption('Otoraryngologist', 'Otoraryngologist'));
        specialties.add(new SelectOption('Osteopath', 'Osteopath'));
        specialties.add(new SelectOption('Pathologist', 'Pathologist'));
        specialties.add(new SelectOption('Pediatrician', 'Pediatrician'));
        specialties.add(new SelectOption('Psychiatrist', 'Psychiatrist'));
        specialties.add(new SelectOption('Pulmonologist', 'Pulmonologist'));
        specialties.add(new SelectOption('Radiologist', 'Radiologist'));
        specialties.add(new SelectOption('Rheumatologist', 'Rheumatologist'));
        specialties.add(new SelectOption('Urologist', 'Urologist'));
        return specialties;
    }
    
    public List<selectOption> getLanguageOptions()
    {
        List<SelectOption> languages = new List<SelectOption>();
        languages.add(new SelectOption('','None Specified'));
        languages.add(new SelectOption('Arabic', 'Arabic'));
        languages.add(new SelectOption('Chinese Mandarin', 'Chinese Mandarin'));
        languages.add(new SelectOption('Dutch', 'Dutch'));
        languages.add(new SelectOption('English', 'English'));
        languages.add(new SelectOption('French', 'French'));
        languages.add(new SelectOption('German', 'German'));
        languages.add(new SelectOption('Greek', 'Greek'));
        languages.add(new SelectOption('Hindi', 'Hindi'));
        languages.add(new SelectOption('Italian', 'Italian'));
        languages.add(new SelectOption('Japanese', 'Janapese'));
        languages.add(new SelectOption('Korean', 'Korean'));
        languages.add(new SelectOption('Polish', 'Polish'));
        languages.add(new SelectOption('Portuguese', 'Portuguese'));
        languages.add(new SelectOption('Russian', 'Russian'));
        languages.add(new SelectOption('Spanish', 'Spanish'));
        languages.add(new SelectOption('Tagalong', 'Tagalong'));
        languages.add(new SelectOption('Vietnamese', 'Vietnamese'));
        return languages;
    }
    
    public List<SelectOption> getGenderOptions()
    {
        List<SelectOption> genders = new List<SelectOption>();
        genders.add(new SelectOption('', 'None Specified'));
        genders.add(new SelectOption('Male', 'Male'));
        genders.add(new SelectOption('Female', 'Female'));
        return genders;
    }
    
    public void updateProviders()
    {
        System.debug('Update Entered');
        Boolean first_pass = true;
        String special_case = '';
        String query_string = 'SELECT Name, Address__c, Specialty__c, Gender__c, Languages__c, Phone__c FROM Provider__c';
        String component = '';
        List<Boolean> checked_boxes = new List<Boolean>{specialtyChecked, locationChecked, languageChecked, genderChecked, nameChecked};
        List<String> input_values = new List<String>{specialtyValue, locationValue, languageValue, genderValue, nameValue};
        
        //Loop cycles through all input elements and checks to see
        //which ones are selected.
        for(Integer i=0;i<5;i++)
        {
            System.debug(checked_boxes[i]);
            System.debug(input_values[i]);
            //Continue if box is checked and the selection is not blank.
            if(checked_boxes[i] == true && input_values[i] != null && input_values[i] != '')
            {
                System.debug(input_values[i]);
                
                special_case = '';
                //Set the value of component based on the value of i
            	switch on i
            	{
                	when 0{
                    	component = 'Specialty__c';
                	}
                	when 1{
                    	component = 'Address__c';
                        special_case = 'address';
                    }
                	when 2{
                    	component = 'Languages__c';
                        special_case = 'lang';
                	}
                	when 3{
                    	component = 'Gender__c';
                	}
                	when 4{	
                    	component = 'Name';
                	}
            	}
                //Check to see if this is the first input element with 
                //a corresponding checked checkbox
                //(i.e. is this the first time we are seeing a selected element.)
                if(first_pass == true)
                {
                    //If first pass is true, add a 'WHERE' clause and set first_pass to false
                    if(special_case == 'lang')
                    {
                        query_string += ' WHERE ' + component + ' includes (\'' + input_values[i] + '\')';
                    }
                    else if(special_case == 'address')
                    {
                        query_string += ' WHERE ' + component + ' LIKE \'%' + input_values[i] + '%\'';
                    }
                    else
                    {
             			query_string += ' WHERE ' + component + ' = \'' + input_values[i] + '\'';   
                    }
                    first_pass = false;
                }
                //If first pass is false, append an 'AND' clause
                else if(special_case == 'lang')
                {
                    query_string += ' AND ' + component + ' includes (\'' + input_values[i] + '\')';
                }
                else if(special_case == 'address')
                {
                    query_string += ' AND ' + component + ' LIKE \'%' + input_values[i] + '%\'';
                }
                else
                {
                    query_string += ' AND ' + component + ' = \'' + input_values[i] + '\'';
                }
            }
        }
        System.debug(query_string);
        provider_list = Database.query(query_string);
    }
    /* END OF SearchController functions*/
    
    /* START OF JqueryDatePicker*/
    public Date fromDate {get;set;}
    public String time8{get;set;}
    public Time actual_time{get;set;}
    public Id doctor_Id{get;set;}
    public Id user_Id{get;set;}
    //public JqueryDatePicker(ApexPages.StandardController stdController) {
		//doctor_Id = stdController.getId();
		//doctor_Id = System.ApexPages.currentPage().getParameters().get('id');
        //user_Id = UserInfo.getUserId();
    //}
    public PageReference showDates() {
        System.debug('######### fromDate'+fromDate);
        return null;
    }
    public void eight(){
        time8 = '8:AM';
        actual_time = Time.newInstance(8,0,0,0);
    }
     public void nine(){
        time8='9:AM';
       	actual_time = Time.newInstance(9,0,0,0);
    }
     public void ten(){
         time8='10:AM';
         actual_time = Time.newInstance(10,0,0,0);
    }
     public void eleven(){
         time8='11:AM';
         actual_time = Time.newInstance(11,0,0,0);
    }
     public void twe(){
        time8='12:PM';
        actual_time = Time.newInstance(12,0,0,0);
    }
     public void three(){
        time8='3:PM';
        actual_time = Time.newInstance(15,0,0,0);
    }
    public void four(){
        time8='4:PM';
        actual_time = Time.newInstance(16,0,0,0);
    }
    public void five(){
        time8='5:PM';
        actual_time = Time.newInstance(17,0,0,0);
    }
    public void six(){
         time8='6:PM';
        actual_time = Time.newInstance(18,0,0,0);
    }
    public void seven(){
        time8='7:PM';
        actual_time = Time.newInstance(19,0,0,0);
    }
    public void eightPm(){
         time8='8:PM';
        actual_time = Time.newInstance(20,0,0,0);
    }
    public PageReference Book(){
        
        DateTime d = DateTime.newInstance(fromDate, actual_time);
        //Id prov_id = 'a0E0b00001GwjbyEAB';
        //user_id = 'a0D0b00000khVrzEAE';
        
        Client__c c = [SELECT Id, Name FROM Client__c WHERE Name = :UserInfo.getName() LIMIT 1];
        user_id = c.Id;
        
        System.debug('User Id: ' + user_id);
        System.debug(provider_ID);
        Appointment__c new_appt = new Appointment__c();
        new_appt.Appointment_Start_Time__c = d;
        new_appt.Client__c = user_id;
        new_appt.Provider__c = provider_ID;
        new_appt.Approval_Status__c = 'Submitted';
        insert new_appt;
     
        PageReference nextpage = new PageReference('/apex/congrat');
        return nextpage;
    }
    /*END OF JqueryDatePicker*/
    
    /*START OF BookAppointment*/
     //public id provider_id;
    //public bookAppointment(apexPages.StandardController std){System.debug(provider_id);}
    public PageReference BookAppointment() {
      Id i = System.currentPageReference().getParameters().get('id');
      System.debug(i);
      System.debug(provider_Id);
      PageReference nextpage = new PageReference('/apex/appointmentPage');
                return nextpage;
    }
    /*END OF BookAppointment*/
}